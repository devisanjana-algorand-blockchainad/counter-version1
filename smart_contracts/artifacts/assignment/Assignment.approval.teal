#pragma version 10

smart_contracts.assignment.contract.Assignment.approval_program:
    intcblock 1 0
    bytecblock "counter"
    callsub __puya_arc4_router__
    return


// smart_contracts.assignment.contract.Assignment.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/assignment/contract.py:5
    // class Assignment(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@8
    pushbytess 0x2fa47328 0x4b5bddfd 0x50ea81cb 0x30c6d58a // method "increment()void", method "decrement()void", method "get()uint64", method "opt_in()void"
    txna ApplicationArgs 0
    match __puya_arc4_router___increment_route@2 __puya_arc4_router___decrement_route@3 __puya_arc4_router___get_route@4 __puya_arc4_router___opt_in_route@5
    intc_1 // 0
    retsub

__puya_arc4_router___increment_route@2:
    // smart_contracts/assignment/contract.py:9
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub increment
    intc_0 // 1
    retsub

__puya_arc4_router___decrement_route@3:
    // smart_contracts/assignment/contract.py:14
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub decrement
    intc_0 // 1
    retsub

__puya_arc4_router___get_route@4:
    // smart_contracts/assignment/contract.py:19
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___opt_in_route@5:
    // smart_contracts/assignment/contract.py:24
    // @abimethod(allow_actions=['OptIn'])
    txn OnCompletion
    intc_0 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    callsub opt_in
    intc_0 // 1
    retsub

__puya_arc4_router___bare_routing@8:
    // smart_contracts/assignment/contract.py:5
    // class Assignment(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@12:
    // smart_contracts/assignment/contract.py:5
    // class Assignment(ARC4Contract):
    intc_1 // 0
    retsub


// smart_contracts.assignment.contract.Assignment.increment() -> void:
increment:
    // smart_contracts/assignment/contract.py:9-10
    // @abimethod()
    // def increment(self) -> None:
    proto 0 0
    // smart_contracts/assignment/contract.py:11
    // assert Txn.sender.is_opted_in(Global.current_application_id), "Must opt in to call"
    txn Sender
    global CurrentApplicationID
    app_opted_in
    assert // Must opt in to call
    // smart_contracts/assignment/contract.py:12
    // self.counter[Txn.sender] += 1
    txn Sender
    dup
    intc_1 // 0
    bytec_0 // "counter"
    app_local_get_ex
    assert // check self.counter exists for account
    intc_0 // 1
    +
    bytec_0 // "counter"
    swap
    app_local_put
    retsub


// smart_contracts.assignment.contract.Assignment.decrement() -> void:
decrement:
    // smart_contracts/assignment/contract.py:14-15
    // @abimethod()
    // def decrement(self) -> None:
    proto 0 0
    // smart_contracts/assignment/contract.py:16
    // assert Txn.sender.is_opted_in(Global.current_application_id), "Must opt in to call"
    txn Sender
    global CurrentApplicationID
    app_opted_in
    assert // Must opt in to call
    // smart_contracts/assignment/contract.py:17
    // self.counter[Txn.sender] -= 1
    txn Sender
    dup
    intc_1 // 0
    bytec_0 // "counter"
    app_local_get_ex
    assert // check self.counter exists for account
    intc_0 // 1
    -
    bytec_0 // "counter"
    swap
    app_local_put
    retsub


// smart_contracts.assignment.contract.Assignment.get() -> uint64:
get:
    // smart_contracts/assignment/contract.py:19-20
    // @abimethod()
    // def get(self) -> UInt64:
    proto 0 1
    // smart_contracts/assignment/contract.py:21
    // assert Txn.sender.is_opted_in(Global.current_application_id), "Must opt in to call"
    txn Sender
    global CurrentApplicationID
    app_opted_in
    assert // Must opt in to call
    // smart_contracts/assignment/contract.py:22
    // return self.counter[Txn.sender]
    txn Sender
    intc_1 // 0
    bytec_0 // "counter"
    app_local_get_ex
    assert // check self.counter exists for account
    retsub


// smart_contracts.assignment.contract.Assignment.opt_in() -> void:
opt_in:
    // smart_contracts/assignment/contract.py:24-25
    // @abimethod(allow_actions=['OptIn'])
    // def opt_in(self) -> None:
    proto 0 0
    // smart_contracts/assignment/contract.py:26
    // self.counter[Txn.sender] = UInt64(0)
    txn Sender
    bytec_0 // "counter"
    intc_1 // 0
    app_local_put
    retsub
